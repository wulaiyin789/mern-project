{"version":3,"sources":["shared/components/UIElmenets/Card/Card.js","shared/components/FormElements/ImageUpload/ImageUpload.js","user/pages/Auth/Auth.js"],"names":["Card","props","className","style","children","ImageUpload","filePickerRef","useRef","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","useEffect","fileReader","FileReader","onload","result","readAsDataURL","id","ref","display","type","accept","onChange","e","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","onClick","current","click","errorText","Auth","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendReq","clearError","useForm","email","value","password","formState","inputHandler","setFormData","authSubmitHandler","a","preventDefault","process","JSON","stringify","inputs","responseData","login","userId","token","formData","FormData","append","name","image","onClear","asOverlay","onSubmit","element","label","validators","VALIDATOR_REQUIRE","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","undefined","prevMode"],"mappings":"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","file":"static/js/6.bcd273b6.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = (props) => {\n    return (\n        <div className={`card ${props.className}`} style={props.style}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Card;\n","import React, { useRef, useState, useEffect } from 'react';\r\n\r\nimport Button from '../Button/Button';\r\n\r\nimport './ImageUpload.css';\r\n\r\nconst ImageUpload = (props) => {\r\n    const filePickerRef = useRef();\r\n    const [file, setFile] = useState();\r\n    const [previewUrl, setPreviewUrl] = useState();\r\n    const [isValid, setIsValid] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!file) {\r\n            return;\r\n        }\r\n\r\n        const fileReader = new FileReader();\r\n        fileReader.onload = () => {\r\n            setPreviewUrl(fileReader.result);\r\n        };\r\n        fileReader.readAsDataURL(file);\r\n    }, [file]);\r\n\r\n    const pickedHandler = (e) => {\r\n        let pickedFile;\r\n        let fileIsValid = isValid;\r\n\r\n        if (e.target.files && e.target.files.length === 1) {\r\n            pickedFile = e.target.files[0];\r\n            setFile(pickedFile);\r\n            setIsValid(true);\r\n            fileIsValid = true;\r\n        } else {\r\n            setIsValid(false);\r\n            fileIsValid = false;\r\n        }\r\n\r\n        props.onInput(props.id, pickedFile, fileIsValid);\r\n    };\r\n\r\n    const pickImageHandler = () => {\r\n        filePickerRef.current.click();\r\n    };\r\n\r\n    return (\r\n        <div className='form-control'>\r\n            <input\r\n                id={props.id}\r\n                ref={filePickerRef}\r\n                style={{ display: 'none' }}\r\n                type='file'\r\n                accept='.jpg,.png,.jpeg'\r\n                onChange={pickedHandler}\r\n            />\r\n            <div className={`image-upload ${props.center && 'center'}`}>\r\n                <div className='image-upload__preview'>\r\n                    {previewUrl ? (\r\n                        <img src={previewUrl} alt='Preview' />\r\n                    ) : (\r\n                        <p>Please Pick an image.</p>\r\n                    )}\r\n                </div>\r\n\r\n                <Button type='button' onClick={pickImageHandler}>\r\n                    PICK IMAGE\r\n                </Button>\r\n            </div>\r\n\r\n            {!isValid && <p>{props.errorText}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import React, { Fragment, useContext, useState } from 'react';\r\nimport { AuthContext } from '../../../shared/context/auth-context';\r\n\r\nimport Card from '../../../shared/components/UIElmenets/Card/Card';\r\nimport Button from '../../../shared/components/FormElements/Button/Button';\r\nimport Input from '../../../shared/components/FormElements/Input/Input';\r\nimport ErrorModal from '../../../shared/components/UIElmenets/ErrorModal/ErrorModal';\r\nimport LoadingSpinner from '../../../shared/components/UIElmenets/LoadingSpinner/LoadingSpinner';\r\nimport ImageUpload from '../../../shared/components/FormElements/ImageUpload/ImageUpload';\r\n\r\nimport {\r\n    VALIDATOR_EMAIL,\r\n    VALIDATOR_MINLENGTH,\r\n    VALIDATOR_REQUIRE\r\n} from '../../../shared/util/validators';\r\nimport { useForm } from '../../../shared/hooks/useForm/useForm';\r\nimport { useHttpClient } from '../../../shared/hooks/useHttp/useHttp';\r\n\r\nimport './Auth.css';\r\n\r\nconst Auth = () => {\r\n    const auth = useContext(AuthContext);\r\n    const [isLoginMode, setIsLoginMode] = useState(true);\r\n\r\n    const { isLoading, error, sendReq, clearError } = useHttpClient();\r\n\r\n    const [formState, inputHandler, setFormData] = useForm(\r\n        {\r\n            email: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            password: {\r\n                value: '',\r\n                isValid: false\r\n            }\r\n        },\r\n        false\r\n    );\r\n\r\n    const authSubmitHandler = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (isLoginMode) {\r\n            try {\r\n                const responseData = await sendReq(\r\n                    process.env.REACT_APP_BACKEND_URL + '/users/login',\r\n                    'POST',\r\n                    JSON.stringify({\r\n                        email: formState.inputs.email.value,\r\n                        password: formState.inputs.password.value\r\n                    }),\r\n                    {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                );\r\n\r\n                auth.login(responseData.userId, responseData.token);\r\n            } catch (err) {}\r\n        } else {\r\n            const formData = new FormData();\r\n            formData.append('email', formState.inputs.email.value);\r\n            formData.append('name', formState.inputs.name.value);\r\n            formData.append('password', formState.inputs.password.value);\r\n            formData.append('image', formState.inputs.image.value);\r\n\r\n            try {\r\n                // JSON.stringify({\r\n                //     name: formState.inputs.name.value,\r\n                //     email: formState.inputs.email.value,\r\n                //     password: formState.inputs.password.value\r\n                // })\r\n                const responseData = await sendReq(\r\n                    process.env.REACT_APP_BACKEND_URL + '/users/signup',\r\n                    'POST',\r\n                    formData\r\n                    // {\r\n                    //     'Content-Type': 'application/json'\r\n                    // }\r\n                );\r\n\r\n                auth.login(responseData.userId, responseData.token);\r\n            } catch (err) {}\r\n        }\r\n    };\r\n\r\n    const switchHandler = () => {\r\n        if (!isLoginMode) {\r\n            setFormData(\r\n                {\r\n                    ...formState.inputs,\r\n                    name: undefined,\r\n                    image: undefined\r\n                },\r\n                formState.inputs.email.isValid && formState.inputs.password.isValid\r\n            );\r\n        } else {\r\n            setFormData(\r\n                {\r\n                    ...formState.inputs,\r\n                    name: {\r\n                        value: '',\r\n                        isValid: false\r\n                    },\r\n                    image: {\r\n                        value: null,\r\n                        isValid: false\r\n                    }\r\n                },\r\n                false\r\n            );\r\n        }\r\n        setIsLoginMode((prevMode) => !prevMode);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            <Card className='authentication'>\r\n                {isLoading && <LoadingSpinner asOverlay />}\r\n                <h2>{isLoginMode ? 'Login' : 'Sign Up'} Required</h2>\r\n                <hr />\r\n                <form onSubmit={authSubmitHandler}>\r\n                    {!isLoginMode && (\r\n                        <Input\r\n                            element='input'\r\n                            id='name'\r\n                            type='text'\r\n                            label='Your Name'\r\n                            validators={[VALIDATOR_REQUIRE()]}\r\n                            errorText='Please enter a name'\r\n                            onInput={inputHandler}\r\n                        />\r\n                    )}\r\n\r\n                    {!isLoginMode && (\r\n                        <ImageUpload\r\n                            center\r\n                            id='image'\r\n                            onInput={inputHandler}\r\n                            errorText='Please provide an image'\r\n                        />\r\n                    )}\r\n\r\n                    <Input\r\n                        element='input'\r\n                        id='email'\r\n                        type='email'\r\n                        label='Email'\r\n                        validators={[VALIDATOR_EMAIL()]}\r\n                        errorText='Please enter a valid email.'\r\n                        onInput={inputHandler}\r\n                    />\r\n\r\n                    <Input\r\n                        element='input'\r\n                        id='password'\r\n                        type='password'\r\n                        label='Password'\r\n                        validators={[VALIDATOR_MINLENGTH(6)]}\r\n                        errorText='Please enter a valid password at least 6 characters.'\r\n                        onInput={inputHandler}\r\n                    />\r\n\r\n                    <Button type='submit' disabled={!formState.isValid}>\r\n                        {isLoginMode ? 'LOGIN' : 'SIGNUP'}\r\n                    </Button>\r\n                </form>\r\n                <Button inverse onClick={switchHandler}>\r\n                    SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\r\n                </Button>\r\n            </Card>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Auth;\r\n"],"sourceRoot":""}